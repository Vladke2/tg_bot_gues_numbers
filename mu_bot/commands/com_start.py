import random
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from mu_bot.botss import dp, bot
print(bot)


class RN(StatesGroup):
    random_number = State()
    number = State()


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Çüëã!\n–í–∏–±—Ä–µ—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —á–∏—Å–ª–∞ üé≤")
    await RN.random_number.set()


@dp.message_handler(lambda message: message.text.isdigit(), state=RN.random_number,)
async def random_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        maximum = int(message.text)
        data['random_number'] = random.randint(1, maximum)
    await RN.next()
    await message.reply(f"–ó—Ä–æ–∑—É–º—ñ–ª–æ.–º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω–Ω –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —á–∏—Å–ª–∞ {maximum}\n–ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—å")


@dp.message_handler(lambda message: message.text.isdigit(), state=RN.number)
async def answer(message: types.Message, state: FSMContext):
    async with state.proxy() as data1:
        if int(message.text) == data1['random_number']:
            await message.reply('üéâ –í–≤—ñ—Ç–∞—é —Ç–∏ –≤–≥–∞–¥–∞–≤ üéâ!\n–ù–∞—Ç–∏—Å–Ω–∏ /start —â–æ–± –≥—Ä–∞—Ç–∏ –∑–Ω–æ–≤—É ü•á')
            await state.finish()
        elif int(message.text) < data1['random_number']:
            await message.reply('–ù—ñ\n–ú–æ—î —á–∏—Å–ª–æ –±—ñ–ª—å—à–µüëÜüëÜ')
        else:
            await message.reply('–ù—ñ\n–ú–æ—î —á–∏—Å–ª–æ –º–µ–Ω—à–µüëáüëá')
